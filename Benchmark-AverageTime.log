# JMH version: 1.36
# VM version: JDK 1.8.0_322, OpenJDK 64-Bit Server VM, 25.322-b06
# VM invoker: /Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/jre/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=52111:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.os72.protobuf.dynamic.codec.MessageCodecJMHTest.testCircularClass

# Run progress: 0.00% complete, ETA 00:07:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.021 ±(99.9%) 0.001 ms/op
# Warmup Iteration   2: 0.017 ±(99.9%) 0.001 ms/op
Iteration   1: 0.017 ±(99.9%) 0.001 ms/op
Iteration   2: 0.017 ±(99.9%) 0.001 ms/op
Iteration   3: 0.017 ±(99.9%) 0.001 ms/op
Iteration   4: 0.020 ±(99.9%) 0.001 ms/op
Iteration   5: 0.026 ±(99.9%) 0.001 ms/op


Result "com.github.os72.protobuf.dynamic.codec.MessageCodecJMHTest.testCircularClass":
  0.019 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.017, 0.019, 0.026), stdev = 0.004
  CI (99.9%): [0.004, 0.035] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_322, OpenJDK 64-Bit Server VM, 25.322-b06
# VM invoker: /Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/jre/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=52111:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.os72.protobuf.dynamic.codec.MessageCodecJMHTest.testList

# Run progress: 16.67% complete, ETA 00:05:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.057 ±(99.9%) 0.001 ms/op
# Warmup Iteration   2: 0.033 ±(99.9%) 0.001 ms/op
Iteration   1: 0.033 ±(99.9%) 0.001 ms/op
Iteration   2: 0.032 ±(99.9%) 0.001 ms/op
Iteration   3: 0.041 ±(99.9%) 0.001 ms/op
Iteration   4: 0.054 ±(99.9%) 0.001 ms/op
Iteration   5: 0.039 ±(99.9%) 0.001 ms/op


Result "com.github.os72.protobuf.dynamic.codec.MessageCodecJMHTest.testList":
  0.040 ±(99.9%) 0.035 ms/op [Average]
  (min, avg, max) = (0.032, 0.040, 0.054), stdev = 0.009
  CI (99.9%): [0.005, 0.075] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_322, OpenJDK 64-Bit Server VM, 25.322-b06
# VM invoker: /Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/jre/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=52111:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.os72.protobuf.dynamic.codec.MessageCodecJMHTest.testNestedClass

# Run progress: 33.33% complete, ETA 00:04:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.060 ±(99.9%) 0.002 ms/op
# Warmup Iteration   2: 0.053 ±(99.9%) 0.002 ms/op
Iteration   1: 0.052 ±(99.9%) 0.002 ms/op
Iteration   2: 0.068 ±(99.9%) 0.002 ms/op
Iteration   3: 0.077 ±(99.9%) 0.002 ms/op
Iteration   4: 0.068 ±(99.9%) 0.001 ms/op
Iteration   5: 0.052 ±(99.9%) 0.001 ms/op


Result "com.github.os72.protobuf.dynamic.codec.MessageCodecJMHTest.testNestedClass":
  0.064 ±(99.9%) 0.042 ms/op [Average]
  (min, avg, max) = (0.052, 0.064, 0.077), stdev = 0.011
  CI (99.9%): [0.021, 0.106] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_322, OpenJDK 64-Bit Server VM, 25.322-b06
# VM invoker: /Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/jre/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=52111:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.os72.protobuf.dynamic.codec.MessageCodecJMHTest.testNestedList

# Run progress: 50.00% complete, ETA 00:03:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.123 ±(99.9%) 0.004 ms/op
# Warmup Iteration   2: 0.107 ±(99.9%) 0.003 ms/op
Iteration   1: 0.148 ±(99.9%) 0.004 ms/op
Iteration   2: 0.170 ±(99.9%) 0.002 ms/op
Iteration   3: 0.147 ±(99.9%) 0.002 ms/op
Iteration   4: 0.109 ±(99.9%) 0.003 ms/op
Iteration   5: 0.107 ±(99.9%) 0.001 ms/op


Result "com.github.os72.protobuf.dynamic.codec.MessageCodecJMHTest.testNestedList":
  0.136 ±(99.9%) 0.105 ms/op [Average]
  (min, avg, max) = (0.107, 0.136, 0.170), stdev = 0.027
  CI (99.9%): [0.031, 0.242] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_322, OpenJDK 64-Bit Server VM, 25.322-b06
# VM invoker: /Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/jre/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=52111:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.os72.protobuf.dynamic.codec.MessageCodecJMHTest.testSimpleClass

# Run progress: 66.67% complete, ETA 00:02:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ±(99.9%) 0.001 ms/op
# Warmup Iteration   2: 0.014 ±(99.9%) 0.001 ms/op
Iteration   1: 0.015 ±(99.9%) 0.001 ms/op
Iteration   2: 0.013 ±(99.9%) 0.001 ms/op
Iteration   3: 0.010 ±(99.9%) 0.001 ms/op
Iteration   4: 0.010 ±(99.9%) 0.001 ms/op
Iteration   5: 0.010 ±(99.9%) 0.001 ms/op


Result "com.github.os72.protobuf.dynamic.codec.MessageCodecJMHTest.testSimpleClass":
  0.012 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.010, 0.012, 0.015), stdev = 0.002
  CI (99.9%): [0.002, 0.021] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_322, OpenJDK 64-Bit Server VM, 25.322-b06
# VM invoker: /Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/jre/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=52111:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.os72.protobuf.dynamic.codec.MessageCodecJMHTest.testThirdLevel

# Run progress: 83.33% complete, ETA 00:01:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ±(99.9%) 0.001 ms/op
# Warmup Iteration   2: 0.005 ±(99.9%) 0.001 ms/op
Iteration   1: 0.004 ±(99.9%) 0.001 ms/op
Iteration   2: 0.003 ±(99.9%) 0.001 ms/op
Iteration   3: 0.003 ±(99.9%) 0.001 ms/op
Iteration   4: 0.003 ±(99.9%) 0.001 ms/op
Iteration   5: 0.004 ±(99.9%) 0.001 ms/op


Result "com.github.os72.protobuf.dynamic.codec.MessageCodecJMHTest.testThirdLevel":
  0.003 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.005] (assumes normal distribution)


# Run complete. Total time: 00:07:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                              Mode  Cnt  Score   Error  Units
MessageCodecJMHTest.testCircularClass  avgt    5  0.019 ± 0.016  ms/op
MessageCodecJMHTest.testList           avgt    5  0.040 ± 0.035  ms/op
MessageCodecJMHTest.testNestedClass    avgt    5  0.064 ± 0.042  ms/op
MessageCodecJMHTest.testNestedList     avgt    5  0.136 ± 0.105  ms/op
MessageCodecJMHTest.testSimpleClass    avgt    5  0.012 ± 0.010  ms/op
MessageCodecJMHTest.testThirdLevel     avgt    5  0.003 ± 0.002  ms/op
